/* tslint:disable */
/* eslint-disable */
/**
 * PROJECT_NAME
 * Api for development - v1.0
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Administrator
 */
export interface Administrator {
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'avatarId': string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'position': string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof Administrator
     */
    'gender': boolean;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {User}
     * @memberof Administrator
     */
    'user': User;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'districtId': string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'provinceId': string;
    /**
     * 
     * @type {Cadastral}
     * @memberof Administrator
     */
    'province': Cadastral;
    /**
     * 
     * @type {Cadastral}
     * @memberof Administrator
     */
    'district': Cadastral;
    /**
     * 
     * @type {Asset}
     * @memberof Administrator
     */
    'avatar'?: Asset;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface AdministratorClinic
 */
export interface AdministratorClinic {
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorClinic
     */
    'gender': boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'avatarId': string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'clinicId': string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'userId': string;
    /**
     * 
     * @type {User}
     * @memberof AdministratorClinic
     */
    'user': User;
    /**
     * 
     * @type {Asset}
     * @memberof AdministratorClinic
     */
    'avatar'?: Asset;
    /**
     * 
     * @type {Clinic}
     * @memberof AdministratorClinic
     */
    'clinic'?: Clinic;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorClinic
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface AdministratorClinicControllerGetAll200Response
 */
export interface AdministratorClinicControllerGetAll200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdministratorClinicControllerGetAll200Response
     */
    'position': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AdministratorClinicControllerGetAll200Response
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof AdministratorClinicControllerGetAll200Response
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof AdministratorClinicControllerGetAll200Response
     */
    'size': number;
    /**
     * 
     * @type {Array<AdministratorClinic>}
     * @memberof AdministratorClinicControllerGetAll200Response
     */
    'content'?: Array<AdministratorClinic>;
}
/**
 * 
 * @export
 * @interface AdministratorClinicControllerGetAll200ResponseAllOf
 */
export interface AdministratorClinicControllerGetAll200ResponseAllOf {
    /**
     * 
     * @type {Array<AdministratorClinic>}
     * @memberof AdministratorClinicControllerGetAll200ResponseAllOf
     */
    'content'?: Array<AdministratorClinic>;
}
/**
 * 
 * @export
 * @interface AdministratorControllerGet200Response
 */
export interface AdministratorControllerGet200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdministratorControllerGet200Response
     */
    'position': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AdministratorControllerGet200Response
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof AdministratorControllerGet200Response
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof AdministratorControllerGet200Response
     */
    'size': number;
    /**
     * 
     * @type {Array<Administrator>}
     * @memberof AdministratorControllerGet200Response
     */
    'content'?: Array<Administrator>;
}
/**
 * 
 * @export
 * @interface AdministratorControllerGet200ResponseAllOf
 */
export interface AdministratorControllerGet200ResponseAllOf {
    /**
     * 
     * @type {Array<Administrator>}
     * @memberof AdministratorControllerGet200ResponseAllOf
     */
    'content'?: Array<Administrator>;
}
/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'type': AssetTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'mimeType': string;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    'width': number;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    'fileSize': number;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'source': string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'preview': string;
    /**
     * 
     * @type {AssetFocalPoint}
     * @memberof Asset
     */
    'focalPoint': AssetFocalPoint;
    /**
     * 
     * @type {number}
     * @memberof Asset
     */
    'parentId': number;
    /**
     * 
     * @type {Array<Asset>}
     * @memberof Asset
     */
    'children': Array<Asset>;
    /**
     * 
     * @type {Asset}
     * @memberof Asset
     */
    'parent': Asset;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Asset
     */
    'deletedAt': string;
}

export const AssetTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Binary: 'BINARY',
    Folder: 'FOLDER'
} as const;

export type AssetTypeEnum = typeof AssetTypeEnum[keyof typeof AssetTypeEnum];

/**
 * 
 * @export
 * @interface AssetFocalPoint
 */
export interface AssetFocalPoint {
    /**
     * 
     * @type {number}
     * @memberof AssetFocalPoint
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetFocalPoint
     */
    'y'?: number;
}
/**
 * 
 * @export
 * @interface AuthenticationMethod
 */
export interface AuthenticationMethod {
    /**
     * 
     * @type {User}
     * @memberof AuthenticationMethod
     */
    'user': User;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationMethod
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationMethod
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationMethod
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationMethod
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationMethod
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationMethod
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface Cadastral
 */
export interface Cadastral {
    /**
     * 
     * @type {string}
     * @memberof Cadastral
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Cadastral
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Cadastral
     */
    'phoneCode': string;
    /**
     * 
     * @type {string}
     * @memberof Cadastral
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Cadastral
     */
    'baseCode': string;
    /**
     * 
     * @type {string}
     * @memberof Cadastral
     */
    'cityCode': string;
    /**
     * 
     * @type {string}
     * @memberof Cadastral
     */
    'districtCode': string;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * 
     * @type {Array<Clinic>}
     * @memberof Category
     */
    'clinics'?: Array<Clinic>;
    /**
     * 
     * @type {Array<DoctorClinic>}
     * @memberof Category
     */
    'doctorsClinic'?: Array<DoctorClinic>;
    /**
     * 
     * @type {Array<DoctorSupport>}
     * @memberof Category
     */
    'doctorsSupport'?: Array<DoctorSupport>;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface CategoryControllerFindCategory200Response
 */
export interface CategoryControllerFindCategory200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryControllerFindCategory200Response
     */
    'position': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CategoryControllerFindCategory200Response
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryControllerFindCategory200Response
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof CategoryControllerFindCategory200Response
     */
    'size': number;
    /**
     * 
     * @type {Array<Category>}
     * @memberof CategoryControllerFindCategory200Response
     */
    'content'?: Array<Category>;
}
/**
 * 
 * @export
 * @interface CategoryControllerFindCategory200ResponseAllOf
 */
export interface CategoryControllerFindCategory200ResponseAllOf {
    /**
     * 
     * @type {Array<Category>}
     * @memberof CategoryControllerFindCategory200ResponseAllOf
     */
    'content'?: Array<Category>;
}
/**
 * 
 * @export
 * @interface Clinic
 */
export interface Clinic {
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'detailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'phoneClinic': string;
    /**
     * 
     * @type {boolean}
     * @memberof Clinic
     */
    'status': boolean;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'backgroundId': string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'introduce': string;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Clinic
     */
    'categories': Array<Category>;
    /**
     * 
     * @type {Array<AdministratorClinic>}
     * @memberof Clinic
     */
    'adminClinic': Array<AdministratorClinic>;
    /**
     * 
     * @type {Array<DoctorClinic>}
     * @memberof Clinic
     */
    'doctorClinics': Array<DoctorClinic>;
    /**
     * 
     * @type {Asset}
     * @memberof Clinic
     */
    'avatar'?: Asset;
    /**
     * 
     * @type {Array<Medicine>}
     * @memberof Clinic
     */
    'medicines': Array<Medicine>;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'provinceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'districtId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'wardId'?: string;
    /**
     * 
     * @type {Cadastral}
     * @memberof Clinic
     */
    'province'?: Cadastral;
    /**
     * 
     * @type {Cadastral}
     * @memberof Clinic
     */
    'district'?: Cadastral;
    /**
     * 
     * @type {Cadastral}
     * @memberof Clinic
     */
    'ward'?: Cadastral;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Clinic
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface ClinicControllerGetAll200Response
 */
export interface ClinicControllerGetAll200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ClinicControllerGetAll200Response
     */
    'position': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ClinicControllerGetAll200Response
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof ClinicControllerGetAll200Response
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof ClinicControllerGetAll200Response
     */
    'size': number;
    /**
     * 
     * @type {Array<Clinic>}
     * @memberof ClinicControllerGetAll200Response
     */
    'content'?: Array<Clinic>;
}
/**
 * 
 * @export
 * @interface ClinicControllerGetAll200ResponseAllOf
 */
export interface ClinicControllerGetAll200ResponseAllOf {
    /**
     * 
     * @type {Array<Clinic>}
     * @memberof ClinicControllerGetAll200ResponseAllOf
     */
    'content'?: Array<Clinic>;
}
/**
 * 
 * @export
 * @interface CreateAdminClinicDto
 */
export interface CreateAdminClinicDto {
    /**
     * 
     * @type {string}
     * @memberof CreateAdminClinicDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminClinicDto
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminClinicDto
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateAdminClinicDto
     */
    'gender'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminClinicDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminClinicDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminClinicDto
     */
    'clinicId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminClinicDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateAdminDto
 */
export interface CreateAdminDto {
    /**
     * 
     * @type {string}
     * @memberof CreateAdminDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminDto
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminDto
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateAdminDto
     */
    'gender'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminDto
     */
    'position': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateAdminDto
     */
    'roleIds': Array<string>;
}
/**
 * 
 * @export
 * @interface CreateCategoryDto
 */
export interface CreateCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateClinicDto
 */
export interface CreateClinicDto {
    /**
     * 
     * @type {string}
     * @memberof CreateClinicDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClinicDto
     */
    'phoneClinic'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateClinicDto
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateClinicDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClinicDto
     */
    'provinceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClinicDto
     */
    'districtId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClinicDto
     */
    'wardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClinicDto
     */
    'detailAddress'?: string;
    /**
     * 
     * @type {File}
     * @memberof CreateClinicDto
     */
    'backgound': File;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateClinicDto
     */
    'adminClinic'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateCustomerDto
 */
export interface CreateCustomerDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'confirmPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {Array<CreateUserRoleDto>}
     * @memberof CreateCustomerDto
     */
    'roles'?: Array<CreateUserRoleDto>;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerDto
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCustomerDto
     */
    'gender': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCustomerDto
     */
    'status': boolean;
}
/**
 * 
 * @export
 * @interface CreateDoctorClinicDto
 */
export interface CreateDoctorClinicDto {
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorClinicDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorClinicDto
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorClinicDto
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateDoctorClinicDto
     */
    'gender'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorClinicDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorClinicDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorClinicDto
     */
    'level'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateDoctorClinicDto
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorClinicDto
     */
    'overview'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorClinicDto
     */
    'experience'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateDoctorClinicDto
     */
    'categoryIds': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorClinicDto
     */
    'clinicId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorClinicDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateDoctorSupport
 */
export interface CreateDoctorSupport {
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorSupport
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorSupport
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorSupport
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorSupport
     */
    'confirmPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorSupport
     */
    'fullName': string;
    /**
     * 
     * @type {Array<CreateUserRoleDto>}
     * @memberof CreateDoctorSupport
     */
    'roles'?: Array<CreateUserRoleDto>;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorSupport
     */
    'avatarId'?: string;
}
/**
 * 
 * @export
 * @interface CreateFolderDto
 */
export interface CreateFolderDto {
    /**
     * 
     * @type {string}
     * @memberof CreateFolderDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFolderDto
     */
    'assetFolderId'?: string;
}
/**
 * 
 * @export
 * @interface CreateMedicineDto
 */
export interface CreateMedicineDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMedicineDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMedicineDto
     */
    'usage': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMedicineDto
     */
    'feature': string;
    /**
     * 
     * @type {MedicineUnit}
     * @memberof CreateMedicineDto
     */
    'unit'?: MedicineUnit;
    /**
     * 
     * @type {MedicineStatus}
     * @memberof CreateMedicineDto
     */
    'status'?: MedicineStatus;
    /**
     * 
     * @type {string}
     * @memberof CreateMedicineDto
     */
    'clinicId'?: string | null;
}


/**
 * 
 * @export
 * @interface CreateRoleDto
 */
export interface CreateRoleDto {
    /**
     * 
     * @type {string}
     * @memberof CreateRoleDto
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateRoleDto
     */
    'permissions': Array<string>;
}
/**
 * 
 * @export
 * @interface CreateUserRoleDto
 */
export interface CreateUserRoleDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRoleDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'emailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {boolean}
     * @memberof Customer
     */
    'gender': boolean;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'avatarId': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'userId': string;
    /**
     * 
     * @type {User}
     * @memberof Customer
     */
    'user': User;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'districtId': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'provinceId': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'wardId': string;
    /**
     * 
     * @type {Cadastral}
     * @memberof Customer
     */
    'province': Cadastral;
    /**
     * 
     * @type {Cadastral}
     * @memberof Customer
     */
    'district': Cadastral;
    /**
     * 
     * @type {Cadastral}
     * @memberof Customer
     */
    'ward': Cadastral;
    /**
     * 
     * @type {Asset}
     * @memberof Customer
     */
    'avatar'?: Asset;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface CustomerControllerGet200Response
 */
export interface CustomerControllerGet200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerControllerGet200Response
     */
    'position': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CustomerControllerGet200Response
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof CustomerControllerGet200Response
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof CustomerControllerGet200Response
     */
    'size': number;
    /**
     * 
     * @type {Array<Customer>}
     * @memberof CustomerControllerGet200Response
     */
    'content'?: Array<Customer>;
}
/**
 * 
 * @export
 * @interface CustomerControllerGet200ResponseAllOf
 */
export interface CustomerControllerGet200ResponseAllOf {
    /**
     * 
     * @type {Array<Customer>}
     * @memberof CustomerControllerGet200ResponseAllOf
     */
    'content'?: Array<Customer>;
}
/**
 * 
 * @export
 * @interface DoctorClinic
 */
export interface DoctorClinic {
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'emailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {boolean}
     * @memberof DoctorClinic
     */
    'gender': boolean;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'level': string;
    /**
     * 
     * @type {boolean}
     * @memberof DoctorClinic
     */
    'status': boolean;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'overview': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'experience': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'avatarId': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'clinicId': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'userId': string;
    /**
     * 
     * @type {User}
     * @memberof DoctorClinic
     */
    'user': User;
    /**
     * 
     * @type {Asset}
     * @memberof DoctorClinic
     */
    'avatar'?: Asset;
    /**
     * 
     * @type {Clinic}
     * @memberof DoctorClinic
     */
    'clinic'?: Clinic;
    /**
     * 
     * @type {Array<Category>}
     * @memberof DoctorClinic
     */
    'categories': Array<Category>;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorClinic
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface DoctorClinicControllerGetAll200Response
 */
export interface DoctorClinicControllerGetAll200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof DoctorClinicControllerGetAll200Response
     */
    'position': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof DoctorClinicControllerGetAll200Response
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof DoctorClinicControllerGetAll200Response
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof DoctorClinicControllerGetAll200Response
     */
    'size': number;
    /**
     * 
     * @type {Array<DoctorClinic>}
     * @memberof DoctorClinicControllerGetAll200Response
     */
    'content'?: Array<DoctorClinic>;
}
/**
 * 
 * @export
 * @interface DoctorClinicControllerGetAll200ResponseAllOf
 */
export interface DoctorClinicControllerGetAll200ResponseAllOf {
    /**
     * 
     * @type {Array<DoctorClinic>}
     * @memberof DoctorClinicControllerGetAll200ResponseAllOf
     */
    'content'?: Array<DoctorClinic>;
}
/**
 * 
 * @export
 * @interface DoctorSupport
 */
export interface DoctorSupport {
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'avatarId': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'userId': string;
    /**
     * 
     * @type {User}
     * @memberof DoctorSupport
     */
    'user': User;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'districtId': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'provinceId': string;
    /**
     * 
     * @type {Cadastral}
     * @memberof DoctorSupport
     */
    'province': Cadastral;
    /**
     * 
     * @type {Cadastral}
     * @memberof DoctorSupport
     */
    'district': Cadastral;
    /**
     * 
     * @type {Asset}
     * @memberof DoctorSupport
     */
    'avatar'?: Asset;
    /**
     * 
     * @type {Array<Category>}
     * @memberof DoctorSupport
     */
    'categories': Array<Category>;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSupport
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface DoctorSupportControllerFindDoctorSupport200Response
 */
export interface DoctorSupportControllerFindDoctorSupport200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof DoctorSupportControllerFindDoctorSupport200Response
     */
    'position': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof DoctorSupportControllerFindDoctorSupport200Response
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof DoctorSupportControllerFindDoctorSupport200Response
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof DoctorSupportControllerFindDoctorSupport200Response
     */
    'size': number;
    /**
     * 
     * @type {Array<DoctorSupport>}
     * @memberof DoctorSupportControllerFindDoctorSupport200Response
     */
    'content'?: Array<DoctorSupport>;
}
/**
 * 
 * @export
 * @interface DoctorSupportControllerFindDoctorSupport200ResponseAllOf
 */
export interface DoctorSupportControllerFindDoctorSupport200ResponseAllOf {
    /**
     * 
     * @type {Array<DoctorSupport>}
     * @memberof DoctorSupportControllerFindDoctorSupport200ResponseAllOf
     */
    'content'?: Array<DoctorSupport>;
}
/**
 * 
 * @export
 * @interface FindUserByIdentifierDto
 */
export interface FindUserByIdentifierDto {
    /**
     * 
     * @type {string}
     * @memberof FindUserByIdentifierDto
     */
    'identifier': string;
    /**
     * 
     * @type {string}
     * @memberof FindUserByIdentifierDto
     */
    'type': FindUserByIdentifierDtoTypeEnum;
}

export const FindUserByIdentifierDtoTypeEnum = {
    Administrator: 'administrator',
    Customer: 'customer',
    AdministratorClinic: 'administrator_clinic',
    DoctorClinic: 'doctor_clinic',
    DoctorSupport: 'doctor_support'
} as const;

export type FindUserByIdentifierDtoTypeEnum = typeof FindUserByIdentifierDtoTypeEnum[keyof typeof FindUserByIdentifierDtoTypeEnum];

/**
 * 
 * @export
 * @interface ForgotPasswordDto
 */
export interface ForgotPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    'identifier': string;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    'type'?: ForgotPasswordDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    'newPass': string;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    'confirmPass': string;
}

export const ForgotPasswordDtoTypeEnum = {
    Administrator: 'administrator',
    Customer: 'customer',
    AdministratorClinic: 'administrator_clinic',
    DoctorClinic: 'doctor_clinic',
    DoctorSupport: 'doctor_support'
} as const;

export type ForgotPasswordDtoTypeEnum = typeof ForgotPasswordDtoTypeEnum[keyof typeof ForgotPasswordDtoTypeEnum];

/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface Medicine
 */
export interface Medicine {
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'usage': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'feature': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'unit'?: MedicineUnitEnum;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'status'?: MedicineStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'clinicId': string;
    /**
     * 
     * @type {Clinic}
     * @memberof Medicine
     */
    'clinic': Clinic;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'deletedAt': string;
}

export const MedicineUnitEnum = {
    Pellet: 'pellet',
    Jar: 'jar'
} as const;

export type MedicineUnitEnum = typeof MedicineUnitEnum[keyof typeof MedicineUnitEnum];
export const MedicineStatusEnum = {
    Still: 'still',
    NoneLeft: 'none-left'
} as const;

export type MedicineStatusEnum = typeof MedicineStatusEnum[keyof typeof MedicineStatusEnum];

/**
 * 
 * @export
 * @interface MedicineControllerFindAll200Response
 */
export interface MedicineControllerFindAll200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof MedicineControllerFindAll200Response
     */
    'position': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof MedicineControllerFindAll200Response
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof MedicineControllerFindAll200Response
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof MedicineControllerFindAll200Response
     */
    'size': number;
    /**
     * 
     * @type {Array<Medicine>}
     * @memberof MedicineControllerFindAll200Response
     */
    'content'?: Array<Medicine>;
}
/**
 * 
 * @export
 * @interface MedicineControllerFindAll200ResponseAllOf
 */
export interface MedicineControllerFindAll200ResponseAllOf {
    /**
     * 
     * @type {Array<Medicine>}
     * @memberof MedicineControllerFindAll200ResponseAllOf
     */
    'content'?: Array<Medicine>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MedicineStatus = {
    Still: 'still',
    NoneLeft: 'none-left'
} as const;

export type MedicineStatus = typeof MedicineStatus[keyof typeof MedicineStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const MedicineUnit = {
    Pellet: 'pellet',
    Jar: 'jar'
} as const;

export type MedicineUnit = typeof MedicineUnit[keyof typeof MedicineUnit];


/**
 * 
 * @export
 * @interface PaginationResponse
 */
export interface PaginationResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof PaginationResponse
     */
    'position': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'size': number;
}
/**
 * 
 * @export
 * @interface PermissionDefinitionConfig
 */
export interface PermissionDefinitionConfig {
    /**
     * 
     * @type {string}
     * @memberof PermissionDefinitionConfig
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PermissionDefinitionConfig
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PermissionDefinitionConfig
     */
    'assignable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PermissionDefinitionConfig
     */
    'internal'?: boolean;
}
/**
 * 
 * @export
 * @interface PermissionGroupDto
 */
export interface PermissionGroupDto {
    /**
     * 
     * @type {string}
     * @memberof PermissionGroupDto
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGroupDto
     */
    'description': string;
    /**
     * 
     * @type {Array<PermissionDefinitionConfig>}
     * @memberof PermissionGroupDto
     */
    'permissions': Array<PermissionDefinitionConfig>;
}
/**
 * 
 * @export
 * @interface RegisterCustomerDto
 */
export interface RegisterCustomerDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterCustomerDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterCustomerDto
     */
    'otp'?: string;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    'isHidden': boolean;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'code'?: string;
    /**
     * 
     * @type {Array<User>}
     * @memberof Role
     */
    'users'?: Array<User>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Role
     */
    'permissions': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface RoleControllerGet200Response
 */
export interface RoleControllerGet200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof RoleControllerGet200Response
     */
    'position': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof RoleControllerGet200Response
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof RoleControllerGet200Response
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof RoleControllerGet200Response
     */
    'size': number;
    /**
     * 
     * @type {Array<Role>}
     * @memberof RoleControllerGet200Response
     */
    'content'?: Array<Role>;
}
/**
 * 
 * @export
 * @interface RoleControllerGet200ResponseAllOf
 */
export interface RoleControllerGet200ResponseAllOf {
    /**
     * 
     * @type {Array<Role>}
     * @memberof RoleControllerGet200ResponseAllOf
     */
    'content'?: Array<Role>;
}
/**
 * 
 * @export
 * @interface SuccessResponseDto
 */
export interface SuccessResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof SuccessResponseDto
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface UpdateAdminClinicDto
 */
export interface UpdateAdminClinicDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateAdminClinicDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdminClinicDto
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdminClinicDto
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateAdminClinicDto
     */
    'gender'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdminClinicDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdminClinicDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdminClinicDto
     */
    'clinicId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdminClinicDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAdminClinicDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UpdateAdminDto
 */
export interface UpdateAdminDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateAdminDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface UpdateCategoryDto
 */
export interface UpdateCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCategoryDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCategoryDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UpdateClinicDto
 */
export interface UpdateClinicDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateClinicDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateClinicDto
     */
    'phoneClinic'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateClinicDto
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateClinicDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateClinicDto
     */
    'provinceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateClinicDto
     */
    'districtId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateClinicDto
     */
    'wardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateClinicDto
     */
    'detailAddress'?: string;
    /**
     * 
     * @type {File}
     * @memberof UpdateClinicDto
     */
    'backgound'?: File;
    /**
     * 
     * @type {string}
     * @memberof UpdateClinicDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UpdateCustomerDto
 */
export interface UpdateCustomerDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateCustomerDto
     */
    'gender'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'proviceId': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'districId': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'wardId': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCustomerDto
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface UpdateDoctorClinicDto
 */
export interface UpdateDoctorClinicDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateDoctorClinicDto
     */
    'gender'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'level'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateDoctorClinicDto
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'overview'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'experience'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateDoctorClinicDto
     */
    'categoryIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'clinicId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorClinicDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UpdateDoctorSupport
 */
export interface UpdateDoctorSupport {
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorSupport
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorSupport
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorSupport
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorSupport
     */
    'confirmPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorSupport
     */
    'fullName'?: string;
    /**
     * 
     * @type {Array<CreateUserRoleDto>}
     * @memberof UpdateDoctorSupport
     */
    'roles'?: Array<CreateUserRoleDto>;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorSupport
     */
    'avatarId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorSupport
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UpdateMedicineDto
 */
export interface UpdateMedicineDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateMedicineDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMedicineDto
     */
    'usage'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMedicineDto
     */
    'feature'?: string;
    /**
     * 
     * @type {MedicineUnit}
     * @memberof UpdateMedicineDto
     */
    'unit'?: MedicineUnit;
    /**
     * 
     * @type {MedicineStatus}
     * @memberof UpdateMedicineDto
     */
    'status'?: MedicineStatus;
    /**
     * 
     * @type {string}
     * @memberof UpdateMedicineDto
     */
    'clinicId'?: string | null;
}


/**
 * 
 * @export
 * @interface UpdatePasswordDto
 */
export interface UpdatePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordDto
     */
    'type'?: UpdatePasswordDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordDto
     */
    'identifier': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordDto
     */
    'currentPass': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordDto
     */
    'newPass': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordDto
     */
    'confirmPass': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordDto
     */
    'otp': string;
}

export const UpdatePasswordDtoTypeEnum = {
    Administrator: 'administrator',
    Customer: 'customer',
    AdministratorClinic: 'administrator_clinic',
    DoctorClinic: 'doctor_clinic',
    DoctorSupport: 'doctor_support'
} as const;

export type UpdatePasswordDtoTypeEnum = typeof UpdatePasswordDtoTypeEnum[keyof typeof UpdatePasswordDtoTypeEnum];

/**
 * 
 * @export
 * @interface UpdateRoleDto
 */
export interface UpdateRoleDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateRoleDto
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateRoleDto
     */
    'permissions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoleDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'identifier': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'type': string;
    /**
     * 
     * @type {Array<AuthenticationMethod>}
     * @memberof User
     */
    'authenticationMethods': Array<AuthenticationMethod>;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isActive': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'verified': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastLogin': string | null;
    /**
     * 
     * @type {Array<Role>}
     * @memberof User
     */
    'roles': Array<Role>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastModifiedOnDate': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastModifiedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface VerifyTokenDto
 */
export interface VerifyTokenDto {
    /**
     * 
     * @type {string}
     * @memberof VerifyTokenDto
     */
    'token': string;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateAdminDto} createAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorControllerCreate: async (createAdminDto: CreateAdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAdminDto' is not null or undefined
            assertParamExists('administratorControllerCreate', 'createAdminDto', createAdminDto)
            const localVarPath = `/admin/create-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAdminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('administratorControllerDelete', 'id', id)
            const localVarPath = `/admin/delete-admin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorControllerGet: async (page: number, size?: number, sort?: string, fullTextSearch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('administratorControllerGet', 'page', page)
            const localVarPath = `/admin/get-all-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorControllerGetById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('administratorControllerGetById', 'id', id)
            const localVarPath = `/admin/get-admin-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateAdminDto} updateAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorControllerUpdate: async (updateAdminDto: UpdateAdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateAdminDto' is not null or undefined
            assertParamExists('administratorControllerUpdate', 'updateAdminDto', updateAdminDto)
            const localVarPath = `/admin/update-admin/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAdminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateAdminDto} createAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorControllerCreate(createAdminDto: CreateAdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorControllerCreate(createAdminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorControllerGet(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorControllerGet(page, size, sort, fullTextSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorControllerGetById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Administrator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorControllerGetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateAdminDto} updateAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorControllerUpdate(updateAdminDto: UpdateAdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorControllerUpdate(updateAdminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateAdminDto} createAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorControllerCreate(createAdminDto: CreateAdminDto, options?: any): AxiosPromise<object> {
            return localVarFp.administratorControllerCreate(createAdminDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorControllerDelete(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.administratorControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorControllerGet(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: any): AxiosPromise<AdministratorControllerGet200Response> {
            return localVarFp.administratorControllerGet(page, size, sort, fullTextSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorControllerGetById(id: string, options?: any): AxiosPromise<Administrator> {
            return localVarFp.administratorControllerGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateAdminDto} updateAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorControllerUpdate(updateAdminDto: UpdateAdminDto, options?: any): AxiosPromise<object> {
            return localVarFp.administratorControllerUpdate(updateAdminDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @param {CreateAdminDto} createAdminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public administratorControllerCreate(createAdminDto: CreateAdminDto, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).administratorControllerCreate(createAdminDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public administratorControllerDelete(id: string, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).administratorControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public administratorControllerGet(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).administratorControllerGet(page, size, sort, fullTextSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public administratorControllerGetById(id: string, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).administratorControllerGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateAdminDto} updateAdminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public administratorControllerUpdate(updateAdminDto: UpdateAdminDto, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).administratorControllerUpdate(updateAdminDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AdminMedicineApi - axios parameter creator
 * @export
 */
export const AdminMedicineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMedicineDto} createMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineAdminControllerCreate: async (createMedicineDto: CreateMedicineDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMedicineDto' is not null or undefined
            assertParamExists('medicineAdminControllerCreate', 'createMedicineDto', createMedicineDto)
            const localVarPath = `/admin-medicine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMedicineDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {'still' | 'none-left'} [status] 
         * @param {'pellet' | 'jar'} [unit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineAdminControllerFindAll: async (page: number, size?: number, sort?: string, fullTextSearch?: string, status?: 'still' | 'none-left', unit?: 'pellet' | 'jar', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('medicineAdminControllerFindAll', 'page', page)
            const localVarPath = `/admin-medicine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (unit !== undefined) {
                localVarQueryParameter['unit'] = unit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineAdminControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('medicineAdminControllerFindOne', 'id', id)
            const localVarPath = `/admin-medicine/detail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineAdminControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('medicineAdminControllerRemove', 'id', id)
            const localVarPath = `/admin-medicine/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMedicineDto} updateMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineAdminControllerUpdate: async (id: string, updateMedicineDto: UpdateMedicineDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('medicineAdminControllerUpdate', 'id', id)
            // verify required parameter 'updateMedicineDto' is not null or undefined
            assertParamExists('medicineAdminControllerUpdate', 'updateMedicineDto', updateMedicineDto)
            const localVarPath = `/admin-medicine/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMedicineDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminMedicineApi - functional programming interface
 * @export
 */
export const AdminMedicineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminMedicineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateMedicineDto} createMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineAdminControllerCreate(createMedicineDto: CreateMedicineDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Medicine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineAdminControllerCreate(createMedicineDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {'still' | 'none-left'} [status] 
         * @param {'pellet' | 'jar'} [unit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineAdminControllerFindAll(page: number, size?: number, sort?: string, fullTextSearch?: string, status?: 'still' | 'none-left', unit?: 'pellet' | 'jar', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicineControllerFindAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineAdminControllerFindAll(page, size, sort, fullTextSearch, status, unit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineAdminControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Medicine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineAdminControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineAdminControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineAdminControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMedicineDto} updateMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineAdminControllerUpdate(id: string, updateMedicineDto: UpdateMedicineDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Medicine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineAdminControllerUpdate(id, updateMedicineDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminMedicineApi - factory interface
 * @export
 */
export const AdminMedicineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminMedicineApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateMedicineDto} createMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineAdminControllerCreate(createMedicineDto: CreateMedicineDto, options?: any): AxiosPromise<Medicine> {
            return localVarFp.medicineAdminControllerCreate(createMedicineDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {'still' | 'none-left'} [status] 
         * @param {'pellet' | 'jar'} [unit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineAdminControllerFindAll(page: number, size?: number, sort?: string, fullTextSearch?: string, status?: 'still' | 'none-left', unit?: 'pellet' | 'jar', options?: any): AxiosPromise<MedicineControllerFindAll200Response> {
            return localVarFp.medicineAdminControllerFindAll(page, size, sort, fullTextSearch, status, unit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineAdminControllerFindOne(id: string, options?: any): AxiosPromise<Medicine> {
            return localVarFp.medicineAdminControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineAdminControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.medicineAdminControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMedicineDto} updateMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineAdminControllerUpdate(id: string, updateMedicineDto: UpdateMedicineDto, options?: any): AxiosPromise<Medicine> {
            return localVarFp.medicineAdminControllerUpdate(id, updateMedicineDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminMedicineApi - object-oriented interface
 * @export
 * @class AdminMedicineApi
 * @extends {BaseAPI}
 */
export class AdminMedicineApi extends BaseAPI {
    /**
     * 
     * @param {CreateMedicineDto} createMedicineDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminMedicineApi
     */
    public medicineAdminControllerCreate(createMedicineDto: CreateMedicineDto, options?: AxiosRequestConfig) {
        return AdminMedicineApiFp(this.configuration).medicineAdminControllerCreate(createMedicineDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {'still' | 'none-left'} [status] 
     * @param {'pellet' | 'jar'} [unit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminMedicineApi
     */
    public medicineAdminControllerFindAll(page: number, size?: number, sort?: string, fullTextSearch?: string, status?: 'still' | 'none-left', unit?: 'pellet' | 'jar', options?: AxiosRequestConfig) {
        return AdminMedicineApiFp(this.configuration).medicineAdminControllerFindAll(page, size, sort, fullTextSearch, status, unit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminMedicineApi
     */
    public medicineAdminControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return AdminMedicineApiFp(this.configuration).medicineAdminControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminMedicineApi
     */
    public medicineAdminControllerRemove(id: string, options?: AxiosRequestConfig) {
        return AdminMedicineApiFp(this.configuration).medicineAdminControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateMedicineDto} updateMedicineDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminMedicineApi
     */
    public medicineAdminControllerUpdate(id: string, updateMedicineDto: UpdateMedicineDto, options?: AxiosRequestConfig) {
        return AdminMedicineApiFp(this.configuration).medicineAdminControllerUpdate(id, updateMedicineDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AssetsApi - axios parameter creator
 * @export
 */
export const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateFolderDto} createFolderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetControllerCreateFolder: async (createFolderDto: CreateFolderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFolderDto' is not null or undefined
            assertParamExists('assetControllerCreateFolder', 'createFolderDto', createFolderDto)
            const localVarPath = `/assets/create-folder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFolderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('assetControllerDelete', 'id', id)
            const localVarPath = `/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetControllerDiscover: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('assetControllerDiscover', 'folderId', folderId)
            const localVarPath = `/assets/{folderId}/discover`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} file 
         * @param {string} [assetFolderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetControllerUploadFile: async (file: File, assetFolderId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('assetControllerUploadFile', 'file', file)
            const localVarPath = `/assets/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (assetFolderId !== undefined) { 
                localVarFormParams.append('assetFolderId', assetFolderId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetsApi - functional programming interface
 * @export
 */
export const AssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateFolderDto} createFolderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetControllerCreateFolder(createFolderDto: CreateFolderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetControllerCreateFolder(createFolderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetControllerDiscover(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Asset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetControllerDiscover(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {File} file 
         * @param {string} [assetFolderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetControllerUploadFile(file: File, assetFolderId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetControllerUploadFile(file, assetFolderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetsApi - factory interface
 * @export
 */
export const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateFolderDto} createFolderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetControllerCreateFolder(createFolderDto: CreateFolderDto, options?: any): AxiosPromise<object> {
            return localVarFp.assetControllerCreateFolder(createFolderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetControllerDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.assetControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetControllerDiscover(folderId: string, options?: any): AxiosPromise<Array<Asset>> {
            return localVarFp.assetControllerDiscover(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} file 
         * @param {string} [assetFolderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetControllerUploadFile(file: File, assetFolderId?: string, options?: any): AxiosPromise<object> {
            return localVarFp.assetControllerUploadFile(file, assetFolderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export class AssetsApi extends BaseAPI {
    /**
     * 
     * @param {CreateFolderDto} createFolderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public assetControllerCreateFolder(createFolderDto: CreateFolderDto, options?: AxiosRequestConfig) {
        return AssetsApiFp(this.configuration).assetControllerCreateFolder(createFolderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public assetControllerDelete(id: string, options?: AxiosRequestConfig) {
        return AssetsApiFp(this.configuration).assetControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public assetControllerDiscover(folderId: string, options?: AxiosRequestConfig) {
        return AssetsApiFp(this.configuration).assetControllerDiscover(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} file 
     * @param {string} [assetFolderId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public assetControllerUploadFile(file: File, assetFolderId?: string, options?: AxiosRequestConfig) {
        return AssetsApiFp(this.configuration).assetControllerUploadFile(file, assetFolderId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAdminClinicLogin: async (loginDto: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerAdminClinicLogin', 'loginDto', loginDto)
            const localVarPath = `/auth/admin-clinic/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAdminClinicMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/admin-clinic/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAdminLogin: async (loginDto: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerAdminLogin', 'loginDto', loginDto)
            const localVarPath = `/auth/admin/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAdminMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/admin/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindUserByIdentifierDto} findUserByIdentifierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckIdentierForgotPass: async (findUserByIdentifierDto: FindUserByIdentifierDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findUserByIdentifierDto' is not null or undefined
            assertParamExists('authControllerCheckIdentierForgotPass', 'findUserByIdentifierDto', findUserByIdentifierDto)
            const localVarPath = `/auth/check-identier-forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findUserByIdentifierDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCustomerLogin: async (loginDto: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerCustomerLogin', 'loginDto', loginDto)
            const localVarPath = `/auth/customer/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCustomerMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/customer/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDoctorClinicMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/doctor-clinic/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDoctorsClinicLogin: async (loginDto: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerDoctorsClinicLogin', 'loginDto', loginDto)
            const localVarPath = `/auth/doctor-clinic/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDoctorsSupportClinicLogin: async (loginDto: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerDoctorsSupportClinicLogin', 'loginDto', loginDto)
            const localVarPath = `/auth/doctor-support/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindUserByIdentifierDto} findUserByIdentifierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerFindUserByIdentifierAndType: async (findUserByIdentifierDto: FindUserByIdentifierDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findUserByIdentifierDto' is not null or undefined
            assertParamExists('authControllerFindUserByIdentifierAndType', 'findUserByIdentifierDto', findUserByIdentifierDto)
            const localVarPath = `/auth/check-identier`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findUserByIdentifierDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword: async (forgotPasswordDto: ForgotPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDto' is not null or undefined
            assertParamExists('authControllerForgotPassword', 'forgotPasswordDto', forgotPasswordDto)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterCustomerDto} registerCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegisterCustomerAccount: async (registerCustomerDto: RegisterCustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerCustomerDto' is not null or undefined
            assertParamExists('authControllerRegisterCustomerAccount', 'registerCustomerDto', registerCustomerDto)
            const localVarPath = `/auth/customer/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerCustomerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdatePasswordDto} updatePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerUpdatePassword: async (updatePasswordDto: UpdatePasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePasswordDto' is not null or undefined
            assertParamExists('authControllerUpdatePassword', 'updatePasswordDto', updatePasswordDto)
            const localVarPath = `/auth/update-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyTokenDto} verifyTokenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyToken: async (verifyTokenDto: VerifyTokenDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyTokenDto' is not null or undefined
            assertParamExists('authControllerVerifyToken', 'verifyTokenDto', verifyTokenDto)
            const localVarPath = `/auth/verify-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyTokenDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAdminClinicLogin(loginDto: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAdminClinicLogin(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAdminClinicMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorClinic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAdminClinicMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAdminLogin(loginDto: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAdminLogin(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAdminMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Administrator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAdminMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FindUserByIdentifierDto} findUserByIdentifierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCheckIdentierForgotPass(findUserByIdentifierDto: FindUserByIdentifierDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCheckIdentierForgotPass(findUserByIdentifierDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCustomerLogin(loginDto: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCustomerLogin(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCustomerMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCustomerMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerDoctorClinicMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorClinic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerDoctorClinicMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerDoctorsClinicLogin(loginDto: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerDoctorsClinicLogin(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerDoctorsSupportClinicLogin(loginDto: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerDoctorsSupportClinicLogin(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FindUserByIdentifierDto} findUserByIdentifierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerFindUserByIdentifierAndType(findUserByIdentifierDto: FindUserByIdentifierDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerFindUserByIdentifierAndType(findUserByIdentifierDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerForgotPassword(forgotPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterCustomerDto} registerCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegisterCustomerAccount(registerCustomerDto: RegisterCustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegisterCustomerAccount(registerCustomerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdatePasswordDto} updatePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerUpdatePassword(updatePasswordDto: UpdatePasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerUpdatePassword(updatePasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyTokenDto} verifyTokenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerVerifyToken(verifyTokenDto: VerifyTokenDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerVerifyToken(verifyTokenDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAdminClinicLogin(loginDto: LoginDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.authControllerAdminClinicLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAdminClinicMe(options?: any): AxiosPromise<AdministratorClinic> {
            return localVarFp.authControllerAdminClinicMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAdminLogin(loginDto: LoginDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.authControllerAdminLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAdminMe(options?: any): AxiosPromise<Administrator> {
            return localVarFp.authControllerAdminMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindUserByIdentifierDto} findUserByIdentifierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckIdentierForgotPass(findUserByIdentifierDto: FindUserByIdentifierDto, options?: any): AxiosPromise<object> {
            return localVarFp.authControllerCheckIdentierForgotPass(findUserByIdentifierDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCustomerLogin(loginDto: LoginDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.authControllerCustomerLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCustomerMe(options?: any): AxiosPromise<Customer> {
            return localVarFp.authControllerCustomerMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDoctorClinicMe(options?: any): AxiosPromise<DoctorClinic> {
            return localVarFp.authControllerDoctorClinicMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDoctorsClinicLogin(loginDto: LoginDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.authControllerDoctorsClinicLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDoctorsSupportClinicLogin(loginDto: LoginDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.authControllerDoctorsSupportClinicLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindUserByIdentifierDto} findUserByIdentifierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerFindUserByIdentifierAndType(findUserByIdentifierDto: FindUserByIdentifierDto, options?: any): AxiosPromise<object> {
            return localVarFp.authControllerFindUserByIdentifierAndType(findUserByIdentifierDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any): AxiosPromise<object> {
            return localVarFp.authControllerForgotPassword(forgotPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterCustomerDto} registerCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegisterCustomerAccount(registerCustomerDto: RegisterCustomerDto, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerRegisterCustomerAccount(registerCustomerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdatePasswordDto} updatePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerUpdatePassword(updatePasswordDto: UpdatePasswordDto, options?: any): AxiosPromise<object> {
            return localVarFp.authControllerUpdatePassword(updatePasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyTokenDto} verifyTokenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyToken(verifyTokenDto: VerifyTokenDto, options?: any): AxiosPromise<SuccessResponseDto> {
            return localVarFp.authControllerVerifyToken(verifyTokenDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAdminClinicLogin(loginDto: LoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerAdminClinicLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAdminClinicMe(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerAdminClinicMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAdminLogin(loginDto: LoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerAdminLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAdminMe(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerAdminMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindUserByIdentifierDto} findUserByIdentifierDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerCheckIdentierForgotPass(findUserByIdentifierDto: FindUserByIdentifierDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerCheckIdentierForgotPass(findUserByIdentifierDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerCustomerLogin(loginDto: LoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerCustomerLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerCustomerMe(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerCustomerMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerDoctorClinicMe(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerDoctorClinicMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerDoctorsClinicLogin(loginDto: LoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerDoctorsClinicLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerDoctorsSupportClinicLogin(loginDto: LoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerDoctorsSupportClinicLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindUserByIdentifierDto} findUserByIdentifierDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerFindUserByIdentifierAndType(findUserByIdentifierDto: FindUserByIdentifierDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerFindUserByIdentifierAndType(findUserByIdentifierDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ForgotPasswordDto} forgotPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerForgotPassword(forgotPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterCustomerDto} registerCustomerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRegisterCustomerAccount(registerCustomerDto: RegisterCustomerDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerRegisterCustomerAccount(registerCustomerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdatePasswordDto} updatePasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerUpdatePassword(updatePasswordDto: UpdatePasswordDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerUpdatePassword(updatePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyTokenDto} verifyTokenDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerVerifyToken(verifyTokenDto: VerifyTokenDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerVerifyToken(verifyTokenDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CadastralApi - axios parameter creator
 * @export
 */
export const CadastralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [text] 
         * @param {string} [cityCode] 
         * @param {string} [districtCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cadastralControllerGetDistrictByProvince: async (text?: string, cityCode?: string, districtCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cadastral/search-districts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (cityCode !== undefined) {
                localVarQueryParameter['cityCode'] = cityCode;
            }

            if (districtCode !== undefined) {
                localVarQueryParameter['districtCode'] = districtCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [text] 
         * @param {string} [cityCode] 
         * @param {string} [districtCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cadastralControllerGetProvince: async (text?: string, cityCode?: string, districtCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cadastral/province`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (cityCode !== undefined) {
                localVarQueryParameter['cityCode'] = cityCode;
            }

            if (districtCode !== undefined) {
                localVarQueryParameter['districtCode'] = districtCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [text] 
         * @param {string} [cityCode] 
         * @param {string} [districtCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cadastralControllerGetWardByCode: async (text?: string, cityCode?: string, districtCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cadastral/search-wards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (cityCode !== undefined) {
                localVarQueryParameter['cityCode'] = cityCode;
            }

            if (districtCode !== undefined) {
                localVarQueryParameter['districtCode'] = districtCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CadastralApi - functional programming interface
 * @export
 */
export const CadastralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CadastralApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [text] 
         * @param {string} [cityCode] 
         * @param {string} [districtCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cadastralControllerGetDistrictByProvince(text?: string, cityCode?: string, districtCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Cadastral>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cadastralControllerGetDistrictByProvince(text, cityCode, districtCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [text] 
         * @param {string} [cityCode] 
         * @param {string} [districtCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cadastralControllerGetProvince(text?: string, cityCode?: string, districtCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Cadastral>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cadastralControllerGetProvince(text, cityCode, districtCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [text] 
         * @param {string} [cityCode] 
         * @param {string} [districtCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cadastralControllerGetWardByCode(text?: string, cityCode?: string, districtCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Cadastral>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cadastralControllerGetWardByCode(text, cityCode, districtCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CadastralApi - factory interface
 * @export
 */
export const CadastralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CadastralApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [text] 
         * @param {string} [cityCode] 
         * @param {string} [districtCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cadastralControllerGetDistrictByProvince(text?: string, cityCode?: string, districtCode?: string, options?: any): AxiosPromise<Array<Cadastral>> {
            return localVarFp.cadastralControllerGetDistrictByProvince(text, cityCode, districtCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [text] 
         * @param {string} [cityCode] 
         * @param {string} [districtCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cadastralControllerGetProvince(text?: string, cityCode?: string, districtCode?: string, options?: any): AxiosPromise<Array<Cadastral>> {
            return localVarFp.cadastralControllerGetProvince(text, cityCode, districtCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [text] 
         * @param {string} [cityCode] 
         * @param {string} [districtCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cadastralControllerGetWardByCode(text?: string, cityCode?: string, districtCode?: string, options?: any): AxiosPromise<Array<Cadastral>> {
            return localVarFp.cadastralControllerGetWardByCode(text, cityCode, districtCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CadastralApi - object-oriented interface
 * @export
 * @class CadastralApi
 * @extends {BaseAPI}
 */
export class CadastralApi extends BaseAPI {
    /**
     * 
     * @param {string} [text] 
     * @param {string} [cityCode] 
     * @param {string} [districtCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CadastralApi
     */
    public cadastralControllerGetDistrictByProvince(text?: string, cityCode?: string, districtCode?: string, options?: AxiosRequestConfig) {
        return CadastralApiFp(this.configuration).cadastralControllerGetDistrictByProvince(text, cityCode, districtCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [text] 
     * @param {string} [cityCode] 
     * @param {string} [districtCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CadastralApi
     */
    public cadastralControllerGetProvince(text?: string, cityCode?: string, districtCode?: string, options?: AxiosRequestConfig) {
        return CadastralApiFp(this.configuration).cadastralControllerGetProvince(text, cityCode, districtCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [text] 
     * @param {string} [cityCode] 
     * @param {string} [districtCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CadastralApi
     */
    public cadastralControllerGetWardByCode(text?: string, cityCode?: string, districtCode?: string, options?: AxiosRequestConfig) {
        return CadastralApiFp(this.configuration).cadastralControllerGetWardByCode(text, cityCode, districtCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerCreateCategory: async (createCategoryDto: CreateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoryDto' is not null or undefined
            assertParamExists('categoryControllerCreateCategory', 'createCategoryDto', createCategoryDto)
            const localVarPath = `/category/create-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerDeleteCategory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryControllerDeleteCategory', 'id', id)
            const localVarPath = `/category/delete-category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindCategory: async (page: number, size?: number, sort?: string, fullTextSearch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('categoryControllerFindCategory', 'page', page)
            const localVarPath = `/category/get-all-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateCategoryDto} updateCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerUpdateCategory: async (updateCategoryDto: UpdateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCategoryDto' is not null or undefined
            assertParamExists('categoryControllerUpdateCategory', 'updateCategoryDto', updateCategoryDto)
            const localVarPath = `/category/update-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerCreateCategory(createCategoryDto: CreateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerCreateCategory(createCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerDeleteCategory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerDeleteCategory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerFindCategory(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryControllerFindCategory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerFindCategory(page, size, sort, fullTextSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateCategoryDto} updateCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerUpdateCategory(updateCategoryDto: UpdateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerUpdateCategory(updateCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerCreateCategory(createCategoryDto: CreateCategoryDto, options?: any): AxiosPromise<Category> {
            return localVarFp.categoryControllerCreateCategory(createCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerDeleteCategory(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.categoryControllerDeleteCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindCategory(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: any): AxiosPromise<CategoryControllerFindCategory200Response> {
            return localVarFp.categoryControllerFindCategory(page, size, sort, fullTextSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateCategoryDto} updateCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerUpdateCategory(updateCategoryDto: UpdateCategoryDto, options?: any): AxiosPromise<Category> {
            return localVarFp.categoryControllerUpdateCategory(updateCategoryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @param {CreateCategoryDto} createCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerCreateCategory(createCategoryDto: CreateCategoryDto, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerCreateCategory(createCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerDeleteCategory(id: string, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerDeleteCategory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerFindCategory(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerFindCategory(page, size, sort, fullTextSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateCategoryDto} updateCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerUpdateCategory(updateCategoryDto: UpdateCategoryDto, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerUpdateCategory(updateCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ClinicsApi - axios parameter creator
 * @export
 */
export const ClinicsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateClinicDto} createClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerCreateClinic: async (createClinicDto: CreateClinicDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createClinicDto' is not null or undefined
            assertParamExists('clinicControllerCreateClinic', 'createClinicDto', createClinicDto)
            const localVarPath = `/clinics/create-clinic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClinicDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerCreateDoctorForClinic: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clinics/create-doctor-for-clinic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerDeleteClinic: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clinicControllerDeleteClinic', 'id', id)
            const localVarPath = `/clinics/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {string} [provinceId] 
         * @param {string} [districtId] 
         * @param {string} [wardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerGetAll: async (page: number, size?: number, sort?: string, fullTextSearch?: string, provinceId?: string, districtId?: string, wardId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('clinicControllerGetAll', 'page', page)
            const localVarPath = `/clinics/get-all-clinic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }

            if (provinceId !== undefined) {
                localVarQueryParameter['provinceId'] = provinceId;
            }

            if (districtId !== undefined) {
                localVarQueryParameter['districtId'] = districtId;
            }

            if (wardId !== undefined) {
                localVarQueryParameter['wardId'] = wardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {string} [provinceId] 
         * @param {string} [districtId] 
         * @param {string} [wardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerGetAllForCustomer: async (page: number, size?: number, sort?: string, fullTextSearch?: string, provinceId?: string, districtId?: string, wardId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('clinicControllerGetAllForCustomer', 'page', page)
            const localVarPath = `/clinics/get-all-clinic-for-customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }

            if (provinceId !== undefined) {
                localVarQueryParameter['provinceId'] = provinceId;
            }

            if (districtId !== undefined) {
                localVarQueryParameter['districtId'] = districtId;
            }

            if (wardId !== undefined) {
                localVarQueryParameter['wardId'] = wardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerGetById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clinicControllerGetById', 'id', id)
            const localVarPath = `/clinics/get-clinic-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerGetByIdForCustomer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clinicControllerGetByIdForCustomer', 'id', id)
            const localVarPath = `/clinics/get-clinic-for-customer-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateClinicDto} updateClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerUpdateClinic: async (updateClinicDto: UpdateClinicDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateClinicDto' is not null or undefined
            assertParamExists('clinicControllerUpdateClinic', 'updateClinicDto', updateClinicDto)
            const localVarPath = `/clinics/update-clinic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateClinicDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerUpdateDoctorForClinic: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clinics/update-doctor-for-clinic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClinicsApi - functional programming interface
 * @export
 */
export const ClinicsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClinicsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateClinicDto} createClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clinicControllerCreateClinic(createClinicDto: CreateClinicDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clinicControllerCreateClinic(createClinicDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clinicControllerCreateDoctorForClinic(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clinicControllerCreateDoctorForClinic(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clinicControllerDeleteClinic(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clinicControllerDeleteClinic(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {string} [provinceId] 
         * @param {string} [districtId] 
         * @param {string} [wardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clinicControllerGetAll(page: number, size?: number, sort?: string, fullTextSearch?: string, provinceId?: string, districtId?: string, wardId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClinicControllerGetAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clinicControllerGetAll(page, size, sort, fullTextSearch, provinceId, districtId, wardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {string} [provinceId] 
         * @param {string} [districtId] 
         * @param {string} [wardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clinicControllerGetAllForCustomer(page: number, size?: number, sort?: string, fullTextSearch?: string, provinceId?: string, districtId?: string, wardId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClinicControllerGetAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clinicControllerGetAllForCustomer(page, size, sort, fullTextSearch, provinceId, districtId, wardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clinicControllerGetById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Clinic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clinicControllerGetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clinicControllerGetByIdForCustomer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Clinic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clinicControllerGetByIdForCustomer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateClinicDto} updateClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clinicControllerUpdateClinic(updateClinicDto: UpdateClinicDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clinicControllerUpdateClinic(updateClinicDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clinicControllerUpdateDoctorForClinic(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clinicControllerUpdateDoctorForClinic(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClinicsApi - factory interface
 * @export
 */
export const ClinicsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClinicsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateClinicDto} createClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerCreateClinic(createClinicDto: CreateClinicDto, options?: any): AxiosPromise<object> {
            return localVarFp.clinicControllerCreateClinic(createClinicDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerCreateDoctorForClinic(options?: any): AxiosPromise<void> {
            return localVarFp.clinicControllerCreateDoctorForClinic(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerDeleteClinic(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.clinicControllerDeleteClinic(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {string} [provinceId] 
         * @param {string} [districtId] 
         * @param {string} [wardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerGetAll(page: number, size?: number, sort?: string, fullTextSearch?: string, provinceId?: string, districtId?: string, wardId?: string, options?: any): AxiosPromise<ClinicControllerGetAll200Response> {
            return localVarFp.clinicControllerGetAll(page, size, sort, fullTextSearch, provinceId, districtId, wardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {string} [provinceId] 
         * @param {string} [districtId] 
         * @param {string} [wardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerGetAllForCustomer(page: number, size?: number, sort?: string, fullTextSearch?: string, provinceId?: string, districtId?: string, wardId?: string, options?: any): AxiosPromise<ClinicControllerGetAll200Response> {
            return localVarFp.clinicControllerGetAllForCustomer(page, size, sort, fullTextSearch, provinceId, districtId, wardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerGetById(id: string, options?: any): AxiosPromise<Clinic> {
            return localVarFp.clinicControllerGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerGetByIdForCustomer(id: string, options?: any): AxiosPromise<Clinic> {
            return localVarFp.clinicControllerGetByIdForCustomer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateClinicDto} updateClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerUpdateClinic(updateClinicDto: UpdateClinicDto, options?: any): AxiosPromise<object> {
            return localVarFp.clinicControllerUpdateClinic(updateClinicDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clinicControllerUpdateDoctorForClinic(options?: any): AxiosPromise<void> {
            return localVarFp.clinicControllerUpdateDoctorForClinic(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClinicsApi - object-oriented interface
 * @export
 * @class ClinicsApi
 * @extends {BaseAPI}
 */
export class ClinicsApi extends BaseAPI {
    /**
     * 
     * @param {CreateClinicDto} createClinicDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClinicsApi
     */
    public clinicControllerCreateClinic(createClinicDto: CreateClinicDto, options?: AxiosRequestConfig) {
        return ClinicsApiFp(this.configuration).clinicControllerCreateClinic(createClinicDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClinicsApi
     */
    public clinicControllerCreateDoctorForClinic(options?: AxiosRequestConfig) {
        return ClinicsApiFp(this.configuration).clinicControllerCreateDoctorForClinic(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClinicsApi
     */
    public clinicControllerDeleteClinic(id: string, options?: AxiosRequestConfig) {
        return ClinicsApiFp(this.configuration).clinicControllerDeleteClinic(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {string} [provinceId] 
     * @param {string} [districtId] 
     * @param {string} [wardId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClinicsApi
     */
    public clinicControllerGetAll(page: number, size?: number, sort?: string, fullTextSearch?: string, provinceId?: string, districtId?: string, wardId?: string, options?: AxiosRequestConfig) {
        return ClinicsApiFp(this.configuration).clinicControllerGetAll(page, size, sort, fullTextSearch, provinceId, districtId, wardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {string} [provinceId] 
     * @param {string} [districtId] 
     * @param {string} [wardId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClinicsApi
     */
    public clinicControllerGetAllForCustomer(page: number, size?: number, sort?: string, fullTextSearch?: string, provinceId?: string, districtId?: string, wardId?: string, options?: AxiosRequestConfig) {
        return ClinicsApiFp(this.configuration).clinicControllerGetAllForCustomer(page, size, sort, fullTextSearch, provinceId, districtId, wardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClinicsApi
     */
    public clinicControllerGetById(id: string, options?: AxiosRequestConfig) {
        return ClinicsApiFp(this.configuration).clinicControllerGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClinicsApi
     */
    public clinicControllerGetByIdForCustomer(id: string, options?: AxiosRequestConfig) {
        return ClinicsApiFp(this.configuration).clinicControllerGetByIdForCustomer(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateClinicDto} updateClinicDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClinicsApi
     */
    public clinicControllerUpdateClinic(updateClinicDto: UpdateClinicDto, options?: AxiosRequestConfig) {
        return ClinicsApiFp(this.configuration).clinicControllerUpdateClinic(updateClinicDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClinicsApi
     */
    public clinicControllerUpdateDoctorForClinic(options?: AxiosRequestConfig) {
        return ClinicsApiFp(this.configuration).clinicControllerUpdateDoctorForClinic(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateCustomerDto} createCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerCreateCustomer: async (createCustomerDto: CreateCustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCustomerDto' is not null or undefined
            assertParamExists('customerControllerCreateCustomer', 'createCustomerDto', createCustomerDto)
            const localVarPath = `/customers/create-customer-for-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerDeleteCustomer: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers/delete-customer-for-customer/delete/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerDeleteCustomerById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerControllerDeleteCustomerById', 'id', id)
            const localVarPath = `/customers/delete-customer-for-admin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {boolean} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerGet: async (page: number, size?: number, sort?: string, fullTextSearch?: string, status?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('customerControllerGet', 'page', page)
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerGetById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerControllerGetById', 'id', id)
            const localVarPath = `/customers/get-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerGetDetail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers/get-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateCustomerDto} updateCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerUpdate: async (updateCustomerDto: UpdateCustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCustomerDto' is not null or undefined
            assertParamExists('customerControllerUpdate', 'updateCustomerDto', updateCustomerDto)
            const localVarPath = `/customers/update-for-customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCustomerDto} updateCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerUpdateCustomer: async (id: string, updateCustomerDto: UpdateCustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerControllerUpdateCustomer', 'id', id)
            // verify required parameter 'updateCustomerDto' is not null or undefined
            assertParamExists('customerControllerUpdateCustomer', 'updateCustomerDto', updateCustomerDto)
            const localVarPath = `/customers/update-customer-for-admin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateCustomerDto} createCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerCreateCustomer(createCustomerDto: CreateCustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerCreateCustomer(createCustomerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerDeleteCustomer(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerDeleteCustomer(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerDeleteCustomerById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerDeleteCustomerById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {boolean} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerGet(page: number, size?: number, sort?: string, fullTextSearch?: string, status?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerGet(page, size, sort, fullTextSearch, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerGetById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerGetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerGetDetail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerGetDetail(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateCustomerDto} updateCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerUpdate(updateCustomerDto: UpdateCustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerUpdate(updateCustomerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCustomerDto} updateCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerControllerUpdateCustomer(id: string, updateCustomerDto: UpdateCustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerControllerUpdateCustomer(id, updateCustomerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateCustomerDto} createCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerCreateCustomer(createCustomerDto: CreateCustomerDto, options?: any): AxiosPromise<CustomerControllerGet200Response> {
            return localVarFp.customerControllerCreateCustomer(createCustomerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerDeleteCustomer(options?: any): AxiosPromise<CustomerControllerGet200Response> {
            return localVarFp.customerControllerDeleteCustomer(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerDeleteCustomerById(id: string, options?: any): AxiosPromise<CustomerControllerGet200Response> {
            return localVarFp.customerControllerDeleteCustomerById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {boolean} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerGet(page: number, size?: number, sort?: string, fullTextSearch?: string, status?: boolean, options?: any): AxiosPromise<CustomerControllerGet200Response> {
            return localVarFp.customerControllerGet(page, size, sort, fullTextSearch, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerGetById(id: string, options?: any): AxiosPromise<Customer> {
            return localVarFp.customerControllerGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerGetDetail(options?: any): AxiosPromise<Customer> {
            return localVarFp.customerControllerGetDetail(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateCustomerDto} updateCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerUpdate(updateCustomerDto: UpdateCustomerDto, options?: any): AxiosPromise<void> {
            return localVarFp.customerControllerUpdate(updateCustomerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCustomerDto} updateCustomerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerControllerUpdateCustomer(id: string, updateCustomerDto: UpdateCustomerDto, options?: any): AxiosPromise<CustomerControllerGet200Response> {
            return localVarFp.customerControllerUpdateCustomer(id, updateCustomerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI {
    /**
     * 
     * @param {CreateCustomerDto} createCustomerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customerControllerCreateCustomer(createCustomerDto: CreateCustomerDto, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customerControllerCreateCustomer(createCustomerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customerControllerDeleteCustomer(options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customerControllerDeleteCustomer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customerControllerDeleteCustomerById(id: string, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customerControllerDeleteCustomerById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {boolean} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customerControllerGet(page: number, size?: number, sort?: string, fullTextSearch?: string, status?: boolean, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customerControllerGet(page, size, sort, fullTextSearch, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customerControllerGetById(id: string, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customerControllerGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customerControllerGetDetail(options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customerControllerGetDetail(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateCustomerDto} updateCustomerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customerControllerUpdate(updateCustomerDto: UpdateCustomerDto, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customerControllerUpdate(updateCustomerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCustomerDto} updateCustomerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public customerControllerUpdateCustomer(id: string, updateCustomerDto: UpdateCustomerDto, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).customerControllerUpdateCustomer(id, updateCustomerDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateAdminClinicDto} createAdminClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerCreateClinic: async (createAdminClinicDto: CreateAdminClinicDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAdminClinicDto' is not null or undefined
            assertParamExists('administratorClinicControllerCreateClinic', 'createAdminClinicDto', createAdminClinicDto)
            const localVarPath = `/administrator-clinic/create-admin-clinic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAdminClinicDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerDeleteClinic: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('administratorClinicControllerDeleteClinic', 'id', id)
            const localVarPath = `/administrator-clinic/delete-admin-clinic/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerGetAll: async (page: number, size?: number, sort?: string, fullTextSearch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('administratorClinicControllerGetAll', 'page', page)
            const localVarPath = `/administrator-clinic/get-all-admin-clinic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerGetAllForCustomer: async (page: number, size?: number, sort?: string, fullTextSearch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('administratorClinicControllerGetAllForCustomer', 'page', page)
            const localVarPath = `/administrator-clinic/get-all-admin-clinic-for-custormer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} clinicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerGetAllNoPagination: async (clinicId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clinicId' is not null or undefined
            assertParamExists('administratorClinicControllerGetAllNoPagination', 'clinicId', clinicId)
            const localVarPath = `/administrator-clinic/get-all-admin-clinic-no-pagination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clinicId !== undefined) {
                localVarQueryParameter['clinicId'] = clinicId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerGetById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('administratorClinicControllerGetById', 'id', id)
            const localVarPath = `/administrator-clinic/get-admin-clinic-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerGetByIdForCustomrer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('administratorClinicControllerGetByIdForCustomrer', 'id', id)
            const localVarPath = `/administrator-clinic/get-admin-clinic-for-customer-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateAdminClinicDto} updateAdminClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerUpdateClinic: async (updateAdminClinicDto: UpdateAdminClinicDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateAdminClinicDto' is not null or undefined
            assertParamExists('administratorClinicControllerUpdateClinic', 'updateAdminClinicDto', updateAdminClinicDto)
            const localVarPath = `/administrator-clinic/update-admin-clinic/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAdminClinicDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateAdminClinicDto} createAdminClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorClinicControllerCreateClinic(createAdminClinicDto: CreateAdminClinicDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorClinicControllerCreateClinic(createAdminClinicDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorClinicControllerDeleteClinic(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorClinicControllerDeleteClinic(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorClinicControllerGetAll(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorClinicControllerGetAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorClinicControllerGetAll(page, size, sort, fullTextSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorClinicControllerGetAllForCustomer(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorClinicControllerGetAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorClinicControllerGetAllForCustomer(page, size, sort, fullTextSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} clinicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorClinicControllerGetAllNoPagination(clinicId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdministratorClinic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorClinicControllerGetAllNoPagination(clinicId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorClinicControllerGetById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorClinic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorClinicControllerGetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorClinicControllerGetByIdForCustomrer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorClinic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorClinicControllerGetByIdForCustomrer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateAdminClinicDto} updateAdminClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async administratorClinicControllerUpdateClinic(updateAdminClinicDto: UpdateAdminClinicDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.administratorClinicControllerUpdateClinic(updateAdminClinicDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateAdminClinicDto} createAdminClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerCreateClinic(createAdminClinicDto: CreateAdminClinicDto, options?: any): AxiosPromise<void> {
            return localVarFp.administratorClinicControllerCreateClinic(createAdminClinicDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerDeleteClinic(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.administratorClinicControllerDeleteClinic(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerGetAll(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: any): AxiosPromise<AdministratorClinicControllerGetAll200Response> {
            return localVarFp.administratorClinicControllerGetAll(page, size, sort, fullTextSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerGetAllForCustomer(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: any): AxiosPromise<AdministratorClinicControllerGetAll200Response> {
            return localVarFp.administratorClinicControllerGetAllForCustomer(page, size, sort, fullTextSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} clinicId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerGetAllNoPagination(clinicId: string, options?: any): AxiosPromise<Array<AdministratorClinic>> {
            return localVarFp.administratorClinicControllerGetAllNoPagination(clinicId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerGetById(id: string, options?: any): AxiosPromise<AdministratorClinic> {
            return localVarFp.administratorClinicControllerGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerGetByIdForCustomrer(id: string, options?: any): AxiosPromise<AdministratorClinic> {
            return localVarFp.administratorClinicControllerGetByIdForCustomrer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateAdminClinicDto} updateAdminClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        administratorClinicControllerUpdateClinic(updateAdminClinicDto: UpdateAdminClinicDto, options?: any): AxiosPromise<object> {
            return localVarFp.administratorClinicControllerUpdateClinic(updateAdminClinicDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {CreateAdminClinicDto} createAdminClinicDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public administratorClinicControllerCreateClinic(createAdminClinicDto: CreateAdminClinicDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).administratorClinicControllerCreateClinic(createAdminClinicDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public administratorClinicControllerDeleteClinic(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).administratorClinicControllerDeleteClinic(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public administratorClinicControllerGetAll(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).administratorClinicControllerGetAll(page, size, sort, fullTextSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public administratorClinicControllerGetAllForCustomer(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).administratorClinicControllerGetAllForCustomer(page, size, sort, fullTextSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} clinicId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public administratorClinicControllerGetAllNoPagination(clinicId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).administratorClinicControllerGetAllNoPagination(clinicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public administratorClinicControllerGetById(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).administratorClinicControllerGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public administratorClinicControllerGetByIdForCustomrer(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).administratorClinicControllerGetByIdForCustomrer(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateAdminClinicDto} updateAdminClinicDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public administratorClinicControllerUpdateClinic(updateAdminClinicDto: UpdateAdminClinicDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).administratorClinicControllerUpdateClinic(updateAdminClinicDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DoctorClinicApi - axios parameter creator
 * @export
 */
export const DoctorClinicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateDoctorClinicDto} createDoctorClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorClinicControllerCreate: async (createDoctorClinicDto: CreateDoctorClinicDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDoctorClinicDto' is not null or undefined
            assertParamExists('doctorClinicControllerCreate', 'createDoctorClinicDto', createDoctorClinicDto)
            const localVarPath = `/doctor-clinic/create-doctor-clinic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDoctorClinicDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorClinicControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('doctorClinicControllerDelete', 'id', id)
            const localVarPath = `/doctor-clinic/delete-doctor-clinic/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {string} [categoryId] 
         * @param {string} [clinicId] 
         * @param {boolean} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorClinicControllerGetAll: async (page: number, size?: number, sort?: string, fullTextSearch?: string, categoryId?: string, clinicId?: string, status?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('doctorClinicControllerGetAll', 'page', page)
            const localVarPath = `/doctor-clinic/get-all-doctor-clinic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            if (clinicId !== undefined) {
                localVarQueryParameter['clinicId'] = clinicId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorClinicControllerGetById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('doctorClinicControllerGetById', 'id', id)
            const localVarPath = `/doctor-clinic/get-doctor-clinic-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateDoctorClinicDto} updateDoctorClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorClinicControllerUpdate: async (updateDoctorClinicDto: UpdateDoctorClinicDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateDoctorClinicDto' is not null or undefined
            assertParamExists('doctorClinicControllerUpdate', 'updateDoctorClinicDto', updateDoctorClinicDto)
            const localVarPath = `/doctor-clinic/update-doctor-clinic/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDoctorClinicDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DoctorClinicApi - functional programming interface
 * @export
 */
export const DoctorClinicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DoctorClinicApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateDoctorClinicDto} createDoctorClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doctorClinicControllerCreate(createDoctorClinicDto: CreateDoctorClinicDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doctorClinicControllerCreate(createDoctorClinicDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doctorClinicControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doctorClinicControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {string} [categoryId] 
         * @param {string} [clinicId] 
         * @param {boolean} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doctorClinicControllerGetAll(page: number, size?: number, sort?: string, fullTextSearch?: string, categoryId?: string, clinicId?: string, status?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorClinicControllerGetAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doctorClinicControllerGetAll(page, size, sort, fullTextSearch, categoryId, clinicId, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doctorClinicControllerGetById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorClinic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doctorClinicControllerGetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateDoctorClinicDto} updateDoctorClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doctorClinicControllerUpdate(updateDoctorClinicDto: UpdateDoctorClinicDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doctorClinicControllerUpdate(updateDoctorClinicDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DoctorClinicApi - factory interface
 * @export
 */
export const DoctorClinicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DoctorClinicApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateDoctorClinicDto} createDoctorClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorClinicControllerCreate(createDoctorClinicDto: CreateDoctorClinicDto, options?: any): AxiosPromise<object> {
            return localVarFp.doctorClinicControllerCreate(createDoctorClinicDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorClinicControllerDelete(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.doctorClinicControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {string} [categoryId] 
         * @param {string} [clinicId] 
         * @param {boolean} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorClinicControllerGetAll(page: number, size?: number, sort?: string, fullTextSearch?: string, categoryId?: string, clinicId?: string, status?: boolean, options?: any): AxiosPromise<DoctorClinicControllerGetAll200Response> {
            return localVarFp.doctorClinicControllerGetAll(page, size, sort, fullTextSearch, categoryId, clinicId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorClinicControllerGetById(id: string, options?: any): AxiosPromise<DoctorClinic> {
            return localVarFp.doctorClinicControllerGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateDoctorClinicDto} updateDoctorClinicDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorClinicControllerUpdate(updateDoctorClinicDto: UpdateDoctorClinicDto, options?: any): AxiosPromise<object> {
            return localVarFp.doctorClinicControllerUpdate(updateDoctorClinicDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DoctorClinicApi - object-oriented interface
 * @export
 * @class DoctorClinicApi
 * @extends {BaseAPI}
 */
export class DoctorClinicApi extends BaseAPI {
    /**
     * 
     * @param {CreateDoctorClinicDto} createDoctorClinicDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorClinicApi
     */
    public doctorClinicControllerCreate(createDoctorClinicDto: CreateDoctorClinicDto, options?: AxiosRequestConfig) {
        return DoctorClinicApiFp(this.configuration).doctorClinicControllerCreate(createDoctorClinicDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorClinicApi
     */
    public doctorClinicControllerDelete(id: string, options?: AxiosRequestConfig) {
        return DoctorClinicApiFp(this.configuration).doctorClinicControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {string} [categoryId] 
     * @param {string} [clinicId] 
     * @param {boolean} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorClinicApi
     */
    public doctorClinicControllerGetAll(page: number, size?: number, sort?: string, fullTextSearch?: string, categoryId?: string, clinicId?: string, status?: boolean, options?: AxiosRequestConfig) {
        return DoctorClinicApiFp(this.configuration).doctorClinicControllerGetAll(page, size, sort, fullTextSearch, categoryId, clinicId, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorClinicApi
     */
    public doctorClinicControllerGetById(id: string, options?: AxiosRequestConfig) {
        return DoctorClinicApiFp(this.configuration).doctorClinicControllerGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateDoctorClinicDto} updateDoctorClinicDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorClinicApi
     */
    public doctorClinicControllerUpdate(updateDoctorClinicDto: UpdateDoctorClinicDto, options?: AxiosRequestConfig) {
        return DoctorClinicApiFp(this.configuration).doctorClinicControllerUpdate(updateDoctorClinicDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DoctorSupportApi - axios parameter creator
 * @export
 */
export const DoctorSupportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateDoctorSupport} createDoctorSupport 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorSupportControllerCreateDoctorSupport: async (createDoctorSupport: CreateDoctorSupport, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDoctorSupport' is not null or undefined
            assertParamExists('doctorSupportControllerCreateDoctorSupport', 'createDoctorSupport', createDoctorSupport)
            const localVarPath = `/doctor-support/create-doctor-support`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDoctorSupport, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorSupportControllerDeleteDoctorSupport: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('doctorSupportControllerDeleteDoctorSupport', 'id', id)
            const localVarPath = `/doctor-support/delete-doctor-support/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorSupportControllerFindDoctorSupport: async (page: number, size?: number, sort?: string, fullTextSearch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('doctorSupportControllerFindDoctorSupport', 'page', page)
            const localVarPath = `/doctor-support/get-all-doctor-support`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorSupportControllerFindDoctorSupportById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('doctorSupportControllerFindDoctorSupportById', 'id', id)
            const localVarPath = `/doctor-support/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateDoctorSupport} updateDoctorSupport 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorSupportControllerUpdateDoctorSupport: async (updateDoctorSupport: UpdateDoctorSupport, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateDoctorSupport' is not null or undefined
            assertParamExists('doctorSupportControllerUpdateDoctorSupport', 'updateDoctorSupport', updateDoctorSupport)
            const localVarPath = `/doctor-support/update-doctor-support`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDoctorSupport, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DoctorSupportApi - functional programming interface
 * @export
 */
export const DoctorSupportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DoctorSupportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateDoctorSupport} createDoctorSupport 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doctorSupportControllerCreateDoctorSupport(createDoctorSupport: CreateDoctorSupport, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDoctorSupport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doctorSupportControllerCreateDoctorSupport(createDoctorSupport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doctorSupportControllerDeleteDoctorSupport(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doctorSupportControllerDeleteDoctorSupport(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doctorSupportControllerFindDoctorSupport(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorSupportControllerFindDoctorSupport200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doctorSupportControllerFindDoctorSupport(page, size, sort, fullTextSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doctorSupportControllerFindDoctorSupportById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorSupportControllerFindDoctorSupport200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doctorSupportControllerFindDoctorSupportById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateDoctorSupport} updateDoctorSupport 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doctorSupportControllerUpdateDoctorSupport(updateDoctorSupport: UpdateDoctorSupport, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorSupport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doctorSupportControllerUpdateDoctorSupport(updateDoctorSupport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DoctorSupportApi - factory interface
 * @export
 */
export const DoctorSupportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DoctorSupportApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateDoctorSupport} createDoctorSupport 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorSupportControllerCreateDoctorSupport(createDoctorSupport: CreateDoctorSupport, options?: any): AxiosPromise<CreateDoctorSupport> {
            return localVarFp.doctorSupportControllerCreateDoctorSupport(createDoctorSupport, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorSupportControllerDeleteDoctorSupport(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.doctorSupportControllerDeleteDoctorSupport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorSupportControllerFindDoctorSupport(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: any): AxiosPromise<DoctorSupportControllerFindDoctorSupport200Response> {
            return localVarFp.doctorSupportControllerFindDoctorSupport(page, size, sort, fullTextSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorSupportControllerFindDoctorSupportById(id: string, options?: any): AxiosPromise<DoctorSupportControllerFindDoctorSupport200Response> {
            return localVarFp.doctorSupportControllerFindDoctorSupportById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateDoctorSupport} updateDoctorSupport 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doctorSupportControllerUpdateDoctorSupport(updateDoctorSupport: UpdateDoctorSupport, options?: any): AxiosPromise<DoctorSupport> {
            return localVarFp.doctorSupportControllerUpdateDoctorSupport(updateDoctorSupport, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DoctorSupportApi - object-oriented interface
 * @export
 * @class DoctorSupportApi
 * @extends {BaseAPI}
 */
export class DoctorSupportApi extends BaseAPI {
    /**
     * 
     * @param {CreateDoctorSupport} createDoctorSupport 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSupportApi
     */
    public doctorSupportControllerCreateDoctorSupport(createDoctorSupport: CreateDoctorSupport, options?: AxiosRequestConfig) {
        return DoctorSupportApiFp(this.configuration).doctorSupportControllerCreateDoctorSupport(createDoctorSupport, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSupportApi
     */
    public doctorSupportControllerDeleteDoctorSupport(id: string, options?: AxiosRequestConfig) {
        return DoctorSupportApiFp(this.configuration).doctorSupportControllerDeleteDoctorSupport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSupportApi
     */
    public doctorSupportControllerFindDoctorSupport(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig) {
        return DoctorSupportApiFp(this.configuration).doctorSupportControllerFindDoctorSupport(page, size, sort, fullTextSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSupportApi
     */
    public doctorSupportControllerFindDoctorSupportById(id: string, options?: AxiosRequestConfig) {
        return DoctorSupportApiFp(this.configuration).doctorSupportControllerFindDoctorSupportById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateDoctorSupport} updateDoctorSupport 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSupportApi
     */
    public doctorSupportControllerUpdateDoctorSupport(updateDoctorSupport: UpdateDoctorSupport, options?: AxiosRequestConfig) {
        return DoctorSupportApiFp(this.configuration).doctorSupportControllerUpdateDoctorSupport(updateDoctorSupport, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MailsApi - axios parameter creator
 * @export
 */
export const MailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailControllerTest: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mails/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailsApi - functional programming interface
 * @export
 */
export const MailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MailsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailControllerTest(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailControllerTest(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MailsApi - factory interface
 * @export
 */
export const MailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MailsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailControllerTest(options?: any): AxiosPromise<void> {
            return localVarFp.mailControllerTest(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MailsApi - object-oriented interface
 * @export
 * @class MailsApi
 * @extends {BaseAPI}
 */
export class MailsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailsApi
     */
    public mailControllerTest(options?: AxiosRequestConfig) {
        return MailsApiFp(this.configuration).mailControllerTest(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MedicineApi - axios parameter creator
 * @export
 */
export const MedicineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMedicineDto} createMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineControllerCreate: async (createMedicineDto: CreateMedicineDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMedicineDto' is not null or undefined
            assertParamExists('medicineControllerCreate', 'createMedicineDto', createMedicineDto)
            const localVarPath = `/medicine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMedicineDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {'still' | 'none-left'} [status] 
         * @param {'pellet' | 'jar'} [unit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineControllerFindAll: async (page: number, size?: number, sort?: string, fullTextSearch?: string, status?: 'still' | 'none-left', unit?: 'pellet' | 'jar', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('medicineControllerFindAll', 'page', page)
            const localVarPath = `/medicine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (unit !== undefined) {
                localVarQueryParameter['unit'] = unit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('medicineControllerFindOne', 'id', id)
            const localVarPath = `/medicine/detail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('medicineControllerRemove', 'id', id)
            const localVarPath = `/medicine/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMedicineDto} updateMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineControllerUpdate: async (id: string, updateMedicineDto: UpdateMedicineDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('medicineControllerUpdate', 'id', id)
            // verify required parameter 'updateMedicineDto' is not null or undefined
            assertParamExists('medicineControllerUpdate', 'updateMedicineDto', updateMedicineDto)
            const localVarPath = `/medicine/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMedicineDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MedicineApi - functional programming interface
 * @export
 */
export const MedicineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MedicineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateMedicineDto} createMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineControllerCreate(createMedicineDto: CreateMedicineDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Medicine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineControllerCreate(createMedicineDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {'still' | 'none-left'} [status] 
         * @param {'pellet' | 'jar'} [unit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineControllerFindAll(page: number, size?: number, sort?: string, fullTextSearch?: string, status?: 'still' | 'none-left', unit?: 'pellet' | 'jar', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicineControllerFindAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineControllerFindAll(page, size, sort, fullTextSearch, status, unit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Medicine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMedicineDto} updateMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicineControllerUpdate(id: string, updateMedicineDto: UpdateMedicineDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Medicine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.medicineControllerUpdate(id, updateMedicineDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MedicineApi - factory interface
 * @export
 */
export const MedicineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MedicineApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateMedicineDto} createMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineControllerCreate(createMedicineDto: CreateMedicineDto, options?: any): AxiosPromise<Medicine> {
            return localVarFp.medicineControllerCreate(createMedicineDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {'still' | 'none-left'} [status] 
         * @param {'pellet' | 'jar'} [unit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineControllerFindAll(page: number, size?: number, sort?: string, fullTextSearch?: string, status?: 'still' | 'none-left', unit?: 'pellet' | 'jar', options?: any): AxiosPromise<MedicineControllerFindAll200Response> {
            return localVarFp.medicineControllerFindAll(page, size, sort, fullTextSearch, status, unit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineControllerFindOne(id: string, options?: any): AxiosPromise<Medicine> {
            return localVarFp.medicineControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.medicineControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMedicineDto} updateMedicineDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicineControllerUpdate(id: string, updateMedicineDto: UpdateMedicineDto, options?: any): AxiosPromise<Medicine> {
            return localVarFp.medicineControllerUpdate(id, updateMedicineDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MedicineApi - object-oriented interface
 * @export
 * @class MedicineApi
 * @extends {BaseAPI}
 */
export class MedicineApi extends BaseAPI {
    /**
     * 
     * @param {CreateMedicineDto} createMedicineDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public medicineControllerCreate(createMedicineDto: CreateMedicineDto, options?: AxiosRequestConfig) {
        return MedicineApiFp(this.configuration).medicineControllerCreate(createMedicineDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {'still' | 'none-left'} [status] 
     * @param {'pellet' | 'jar'} [unit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public medicineControllerFindAll(page: number, size?: number, sort?: string, fullTextSearch?: string, status?: 'still' | 'none-left', unit?: 'pellet' | 'jar', options?: AxiosRequestConfig) {
        return MedicineApiFp(this.configuration).medicineControllerFindAll(page, size, sort, fullTextSearch, status, unit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public medicineControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return MedicineApiFp(this.configuration).medicineControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public medicineControllerRemove(id: string, options?: AxiosRequestConfig) {
        return MedicineApiFp(this.configuration).medicineControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateMedicineDto} updateMedicineDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicineApi
     */
    public medicineControllerUpdate(id: string, updateMedicineDto: UpdateMedicineDto, options?: AxiosRequestConfig) {
        return MedicineApiFp(this.configuration).medicineControllerUpdate(id, updateMedicineDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export const PermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionControllerGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export const PermissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permissionControllerGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionGroupDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permissionControllerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionsApi - factory interface
 * @export
 */
export const PermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionControllerGet(options?: any): AxiosPromise<Array<PermissionGroupDto>> {
            return localVarFp.permissionControllerGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export class PermissionsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public permissionControllerGet(options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).permissionControllerGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleControllerCreate: async (createRoleDto: CreateRoleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoleDto' is not null or undefined
            assertParamExists('roleControllerCreate', 'createRoleDto', createRoleDto)
            const localVarPath = `/roles/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roleControllerDelete', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleControllerGet: async (page: number, size?: number, sort?: string, fullTextSearch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('roleControllerGet', 'page', page)
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fullTextSearch !== undefined) {
                localVarQueryParameter['fullTextSearch'] = fullTextSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleControllerGetById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roleControllerGetById', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoleDto} updateRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleControllerUpdate: async (id: string, updateRoleDto: UpdateRoleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roleControllerUpdate', 'id', id)
            // verify required parameter 'updateRoleDto' is not null or undefined
            assertParamExists('roleControllerUpdate', 'updateRoleDto', updateRoleDto)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleControllerCreate(createRoleDto: CreateRoleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roleControllerCreate(createRoleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roleControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleControllerGet(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roleControllerGet(page, size, sort, fullTextSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleControllerGetById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roleControllerGetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoleDto} updateRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleControllerUpdate(id: string, updateRoleDto: UpdateRoleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roleControllerUpdate(id, updateRoleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleControllerCreate(createRoleDto: CreateRoleDto, options?: any): AxiosPromise<Role> {
            return localVarFp.roleControllerCreate(createRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleControllerDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.roleControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [fullTextSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleControllerGet(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: any): AxiosPromise<RoleControllerGet200Response> {
            return localVarFp.roleControllerGet(page, size, sort, fullTextSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleControllerGetById(id: string, options?: any): AxiosPromise<Role> {
            return localVarFp.roleControllerGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRoleDto} updateRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleControllerUpdate(id: string, updateRoleDto: UpdateRoleDto, options?: any): AxiosPromise<object> {
            return localVarFp.roleControllerUpdate(id, updateRoleDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * 
     * @param {CreateRoleDto} createRoleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public roleControllerCreate(createRoleDto: CreateRoleDto, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).roleControllerCreate(createRoleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public roleControllerDelete(id: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).roleControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [fullTextSearch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public roleControllerGet(page: number, size?: number, sort?: string, fullTextSearch?: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).roleControllerGet(page, size, sort, fullTextSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public roleControllerGetById(id: string, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).roleControllerGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateRoleDto} updateRoleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public roleControllerUpdate(id: string, updateRoleDto: UpdateRoleDto, options?: AxiosRequestConfig) {
        return RolesApiFp(this.configuration).roleControllerUpdate(id, updateRoleDto, options).then((request) => request(this.axios, this.basePath));
    }
}


